name: WordPress Plugin Code Quality

# Add permissions block here
permissions:
  contents: read    # To checkout the repository
  actions: write    # For actions/cache to read/write caches
  checks: write     # For PHPStan (and potentially other tools) to create check annotations

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-and-analyze:
    name: Lint & Analyze
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-versions: ['8.1'] # Adjust as needed
        node-versions: ['18.x'] # Adjust as needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7 # Pinned to a specific version

      - name: Set up PHP
        uses: shivammathur/setup-php@v2.33.0 # Pinned to the specific version 2.33.0
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, gd, zip
          tools: composer:v2
        env:
          COMPOSER_NO_INTERACTION: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.3 # Pinned to a specific version
        with:
          node-version: ${{ matrix.node-versions }}
          cache: 'npm'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4.0.2 # Pinned to a specific version
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        if: steps.composer-cache.outputs.dir != '' && hashFiles('composer.json') != ''
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Validate Composer configuration
        if: hashFiles('composer.json') != ''
        run: composer validate --strict

      - name: Install Node.js dependencies
        if: hashFiles('package.json') != ''
        run: npm ci

      - name: Run NPM Audit (Non-blocking)
        if: hashFiles('package-lock.json') != ''
        run: npm audit || true

      - name: PHP Lint (Syntax Check)
        run: find . -name '*.php' -not -path "./vendor/*" -not -path "./node_modules/*" -exec php -l {} \; | (! grep -v "No syntax errors detected" )

      - name: Run PHP_CodeSniffer (WPCS)
        if: hashFiles('composer.json') != '' && hashFiles('phpcs.xml.dist') != ''
        run: ./vendor/bin/phpcs --colors

      - name: Run PHPStan (Static Analysis)
        if: hashFiles('composer.json') != '' && (hashFiles('phpstan.neon') != '' || hashFiles('phpstan.neon.dist') != '')
        run: ./vendor/bin/phpstan analyse --memory-limit=1G --error-format=github

      - name: Run ESLint (JavaScript)
        if: hashFiles('package.json') != '' && (hashFiles('.eslintrc.js') != '' || hashFiles('.eslintrc.json') != '' || hashFiles('.eslintrc.yaml') != '')
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --format=compact

      - name: Run Stylelint (CSS/SCSS)
        if: hashFiles('package.json') != '' && (hashFiles('.stylelintrc.js') != '' || hashFiles('.stylelintrc.json') != '' || hashFiles('.stylelintrc.yaml') != '')
        run: npx stylelint "**/*.{css,scss}" --formatter=compact

      - name: Run Prettier Check (Formatting for JS/CSS/PHP etc.)
        if: hashFiles('package.json') != '' && (hashFiles('.prettierrc.js') != '' || hashFiles('.prettierrc.json') != '' || hashFiles('.prettierrc.yaml') != '')
        run: npx prettier --check .
